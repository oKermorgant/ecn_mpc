#!/usr/bin/env python3

from geometry_msgs.msg import PoseStamped
from nav2_simple_commander.robot_navigator import BasicNavigator
from nav_msgs.msg import Path, Odometry
import rclpy
from rclpy.node import Node
import numpy as np
import pylab as pl

do_plot = True


def toXY(p: PoseStamped):
    return np.array([p.pose.position.x, p.pose.position.y])


def curvature(pp, p, pn) -> float:

    z1 = pp[0]+pp[1]*1j
    z2 = p[0]+p[1]*1j
    z3 = pn[0]+pn[1]*1j

    if (z1 == z2) or (z2 == z3) or (z3 == z1):
        raise ValueError(f"Duplicate points: {z1}, {z2}, {z3}")

    w = (z3 - z1)/(z2 - z1)

    # You should change 0 to a small tolerance for floating point comparisons
    if abs(w.imag) <= 0:
        return 0.

    c = (z2 - z1)*(w - abs(w)**2)/(2j*w.imag) + z1  # Simplified denominator
    r = abs(z1 - c)

    return 1./r


max_vel = 0.277778 * 30      # 30 km/h
max_curv = 1./4.             # curvature radius in 1/m
min_vel = max_vel/2.         # at highest curvature
max_acc = .5*9.81


class Planner(Node):

    def __init__(self):
        super().__init__('plan2traj')

        self.goal_sub = self.create_subscription(PoseStamped, '/goal_pose', self.pose_cb, 10)
        self.plan_pub = self.create_publisher(Path, 'plan_timed', 10)
        self.navigator = BasicNavigator('navigator', namespace='/zoe')

        self.v0 = 0.
        self.odom_sub = self.create_subscription(Odometry, 'odom', self.odom_cb, 1)

        if do_plot:
            self.fig = pl.figure()
            self.ax = pl.gca()
            self.raw, = pl.plot([], [], 'o')
            self.interp, = pl.plot([], [])
            pl.ion()
            pl.show()

    def odom_cb(self, msg):
        self.v0 = msg.twist.twist.linear.x

    def pose_cb(self, pose):

        path: Path = self.navigator.getPath(PoseStamped(), pose, planner_id = 'Hybrid')
        if not path:
            return

        v = np.zeros(len(path.poses))
        v[0] = self.v0
        v[-1] = 0.
        d = np.zeros(len(path.poses))
        wp = [0]

        # TODO compute correct times to go through each pose
        for k,pose in enumerate(path.poses[1:-1]):

            pp = toXY(path.poses[k])
            p = toXY(pose)
            pn = toXY(path.poses[k+2])
            v1 = p-pp
            v2 = pn-p
            d[k+1] = np.linalg.norm(v1)

            if np.dot(v1,v2) > 0:
                c = curvature(pp, p, pn) / max_curv
                c = min(1, max(c, 0))
                if c < 0 or c > 1:
                    print(f'strange curvature {c}')
                # c = 0 -> max_vel, c = 1 -> min_vel
                v[k+1] = max_vel*(1-c) + min_vel*c
            else:
                wp.append(k+1)

            path.poses[k].header.stamp.sec += k
        d[-1] = d[-2]
        wp.append(len(path.poses)-1)

        # interp splines
        vi = np.array(v[:])

        ok = False

        while not ok:
            ok = True
            dv = abs(vi[1:] - vi[:-1])
            k = np.argmax(dv)
            vm = .5*(vi[k+1] + vi[k])
            dt = d[k+1] / vm
            acc = vm/dt
            if acc > 1.1*max_acc:
                ok = False
                if vi[k+1] > vi[k]:
                    vi[k+1] = vi[k] + max_acc*dt
                else:
                    vi[k] = vi[k+1] + max_acc*dt

        if do_plot:
            dc = np.cumsum(d)
            self.interp.set_data(dc, vi)
            self.raw.set_data(dc, v)
            self.ax.set_xlim(dc[0], dc[-1])
            self.ax.set_ylim(min(v), max(v))
            self.fig.canvas.draw()
            self.fig.canvas.flush_events()

        # update timestamps according to velocities

        def setStamp(pose, t):
            pose.header.stamp.sec = sec = int(t)
            pose.header.stamp.nanosec = int((t-sec) * 1e9)

        t = 0.
        setStamp(path.poses[0], t)
        for k, pose in enumerate(path.poses[1:]):
            vm = .5*(vi[k+1] + vi[k])
            if vm != 0.:
                t += d[k+1] / vm
            else:
                t += 0.01
            setStamp(pose, t)

        self.plan_pub.publish(path)


rclpy.init(args=None)
node = Planner()

rclpy.spin(node)
node.destroy_node()
rclpy.shutdown()
